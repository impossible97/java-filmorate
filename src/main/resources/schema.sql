-- noinspection SqlNoDataSourceInspection
CREATE TABLE users
(
    id       int4        NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    email    VARCHAR(50) NOT NULL,
    name     VARCHAR(50),
    login    VARCHAR(50) NOT NULL,
    birthday DATE        NOT NULL,
    CONSTRAINT users_PK PRIMARY KEY (id),
    CONSTRAINT users_email_un UNIQUE (email),
    CONSTRAINT users_login_un UNIQUE (login)
);

CREATE TABLE MPA_names
(
    mpa_id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name   VARCHAR(50),
    CONSTRAINT MPA_PK PRIMARY KEY (mpa_id)
);

CREATE TABLE friendship
(
    user_id   INTEGER,
    friend_id INTEGER,
    CONSTRAINT user_to_friend_un UNIQUE (user_id, friend_id),
    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (friend_id) REFERENCES users (id)
);

CREATE TABLE films
(
    id          int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name        VARCHAR(50),
    description VARCHAR(200),
    releaseDate DATE,
    duration    INTEGER,
    rating_id   INTEGER,
    CONSTRAINT films_PK PRIMARY KEY (id),
    FOREIGN KEY (rating_id) REFERENCES MPA_names (mpa_id)
);

CREATE TABLE likes
(
    film_id INTEGER,
    user_id INTEGER,
    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (film_id) REFERENCES films (id)
);

CREATE TABLE genre_name
(
    genre_id int4 NOT NULL,
    name     VARCHAR(50),
    CONSTRAINT genre_name_PK PRIMARY KEY (genre_id)
);

CREATE TABLE film_genres
(
    film_id  int4 NOT NULL,
    genre_id int4 NOT NULL,
    FOREIGN KEY (film_id) REFERENCES films (id),
    FOREIGN KEY (genre_id) REFERENCES genre_name (genre_id)
);

=======
CREATE TABLE director
(
    id   int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(50),
    CONSTRAINT director_PK PRIMARY KEY (id)
);

CREATE TABLE films_to_directors(
   id INT4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   film_id INT4 NOT NULL,
   director_id INT4 NOT NULL,
   order_by INT4 NOT NULL,
   CONSTRAINT films_to_directors_PK PRIMARY KEY (id),
   FOREIGN KEY (film_id) REFERENCES films (id) ON DELETE CASCADE,
   FOREIGN KEY (director_id) REFERENCES director(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS reviews (
    id INTEGER PRIMARY KEY AUTO_INCREMENT,
    content VARCHAR,
    is_positive VARCHAR,
    user_id INTEGER,
    film_id INTEGER,
    useful INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS reviews_like (
    review_id INTEGER REFERENCES reviews(id) ON DELETE CASCADE,
    user_id_like INTEGER REFERENCES users(id)
);

CREATE TABLE IF NOT EXISTS reviews_dislike (
    review_id INTEGER REFERENCES reviews(id) ON DELETE CASCADE,
    user_id_dislike INTEGER REFERENCES users(id)
);