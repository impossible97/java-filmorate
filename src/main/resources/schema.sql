-- noinspection SqlNoDataSourceInspection
CREATE TABLE users
(
    id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    email VARCHAR(50) NOT NULL,
    name VARCHAR(50),
    login VARCHAR(50) NOT NULL,
    birthday DATE NOT NULL,
    CONSTRAINT users_pk PRIMARY KEY (id),
    CONSTRAINT users_email_un UNIQUE (email),
    CONSTRAINT users_login_un UNIQUE (login)
);

CREATE TABLE MPA_names
(
    mpa_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(50),
    CONSTRAINT MPA_names_pk PRIMARY KEY (mpa_id)
);

CREATE TABLE friendship
(
    user_id INTEGER NOT NULL,
    friend_id INTEGER NOT NULL,
    CONSTRAINT user_to_friend_un UNIQUE (user_id, friend_id),
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    FOREIGN KEY (friend_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE films
(
    id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(50),
    description VARCHAR(200),
    releaseDate DATE,
    duration INTEGER,
    rating_id INTEGER,
    CONSTRAINT films_pk PRIMARY KEY (id),
    FOREIGN KEY (rating_id) REFERENCES MPA_names (mpa_id)
);

CREATE TABLE likes
(
    film_id INTEGER,
    user_id INTEGER,
    CONSTRAINT likes_pk PRIMARY KEY (film_id, user_id),
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    FOREIGN KEY (film_id) REFERENCES films (id) ON DELETE CASCADE
);

CREATE TABLE genre_name
(
    genre_id INTEGER NOT NULL,
    name VARCHAR(50),
    CONSTRAINT genre_name_pk PRIMARY KEY (genre_id)
);

CREATE TABLE film_genres
(
    film_id INTEGER NOT NULL,
    genre_id INTEGER NOT NULL,
    FOREIGN KEY (film_id) REFERENCES films (id) ON DELETE CASCADE,
    FOREIGN KEY (genre_id) REFERENCES genre_name (genre_id)
);

CREATE TABLE director
(
    id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(50),
    CONSTRAINT director_pk PRIMARY KEY (id)
);

CREATE TABLE films_to_directors(
   film_id INTEGER NOT NULL,
   director_id INTEGER NOT NULL,
   order_by INTEGER NOT NULL,
   CONSTRAINT films_to_directors_pk PRIMARY KEY (film_id, director_id),
   FOREIGN KEY (film_id) REFERENCES films (id) ON DELETE CASCADE,
   FOREIGN KEY (director_id) REFERENCES director (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS reviews (
    id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    content VARCHAR NOT NULL,
    is_positive BOOLEAN,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    film_id INTEGER REFERENCES films (id) ON DELETE CASCADE,
    useful INTEGER NOT NULL,
    CONSTRAINT reviews_pk PRIMARY KEY (id),
    UNIQUE (user_id, film_id)
);

CREATE TABLE IF NOT EXISTS reviews_likes (
    review_id INTEGER REFERENCES reviews(id) ON DELETE CASCADE,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    is_like BOOLEAN,
    CONSTRAINT reviews_likes_un UNIQUE (review_id, user_id)
);

CREATE TABLE events
(
    id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    user_id INTEGER NOT NULL,
    entity_id INTEGER NOT NULL,
    event_type VARCHAR(6) NOT NULL,
    operation VARCHAR(6) NOT NULL,
    event_timestamp TIMESTAMP WITH TIME ZONE,
    CONSTRAINT events_pk PRIMARY KEY (id),
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);


